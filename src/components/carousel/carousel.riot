<carousel>
    <div class="row">
        <div class="col m8 s12 offset-m2 center-align">
            <div class="card-wrapper">
                <floating-action-button size="large" icon={ getControlIcon() } position="relative" left="18px" bottom="18px" click={ props.togglePlayback }></floating-action-button>
                <div class="card">
                    <div class="card-content">
                        <p class="truncate">{ state.imageUrl }</p>
                    </div>
                    <div class="card-image">
                        <media-view image-url={ state.imageUrlSuffixed } />
                    </div>
                </div>
                <overlay if={ props.mode === 'pause' || props.mode === 'stop' } icon={ icons[props.mode] } />
            </div>
        </div>
    </div>
    <script>
        import FloatingActionButton from '../components/floating-action-button/floating-action-button.riot';
        import MediaView from '../components/media-view/media-view.riot';
        import Overlay from  '../components/overlay/overlay.riot';

        export default {
            components: {
                FloatingActionButton,
                MediaView,
                Overlay,
            },
            icons: {
                stop: 'stop',
                pause: 'pause',
                play: 'play_arrow',
            },
            getControlIcon() {
                return this.props.mode === 'play' ? this.icons.pause : this.icons.play;
            },
            onMounted() {
                this.interval = false;
                this.currentImageIndex = 1;
                this.updateImage(this.props.urls[0]);
                this.managePlayback();
            },
            onUpdated() {
                this.managePlayback();
            },
            /**
             * CycleImages
             * Cycles through a set of image URLS
             */
            cycleImages() {
                if (this.interval) {
                    clearInterval(this.interval);
                }

                this.interval = setInterval(() => {
                    if (this.props.urls.length <= this.currentImageIndex) {
                        this.currentImageIndex = 0;
                    }

                    this.updateImage(this.props.urls[this.currentImageIndex]);

                    this.currentImageIndex += 1;
                }, this.props.duration);
            },
            /**
             * ManagePlayback
             * Manage playback based on current props
             */
            managePlayback() {
                if (this.props.mode === 'pause' || this.props.mode === 'stop') {
                    this.pausePlayback();
                } else if (!this.interval) {
                    this.resumePlayback();
                }
            },
            /**
             * PausePlayback
             * Pause playback of the media
             */
            pausePlayback() {
                if (this.interval) {
                    clearInterval(this.interval);
                    this.interval = false;
                }
            },
            /**
             * ResumePlayback
             * Resume playback of the media
             */
            resumePlayback() {
                this.cycleImages();
            },
            /**
             * UpdateImage
             * Update the rendered image
             *
             * @param {string} imageUrl - The image URL to load
             */
            updateImage(imageUrl) {
                const imageUrlSuffixed = `${imageUrl}?d=${Date.now()}`;

                this.update({
                    imageUrl,
                    imageUrlSuffixed,
                });
            },
        };
    </script>
</carousel>
