<carousel>
    <div class="row">
        <div class="col m8 s12 offset-m2 center-align">
            <div class="card-wrapper">
                <floating-action-button if={ props.mode !== 'stop' } size="large" icon={ getControlIcon() } position="relative" left="18px" top="68px" click={ props.togglePlayback }></floating-action-button>
                <div class="card">
                    <div class="card-content">
                        <p class="truncate">{ state.imageUrl }</p>
                    </div>
                    <div class="card-image">
                        <media-view if={ props.mode !== 'error' && props.mode !== 'stop' } image-url={ state.imageUrlSuffixed } loaded={ queueNext } error-loading={ errorLoading } />
                        <div if={ props.error } class="error-wrapper error valign-wrapper">
                            <div class="row">
                                <div class="col s12 center-align">
                                    <i class="material-icons small">error</i>
                                </div>
                                <div class="col s12 center-align">
                                    <p class="error">{ props.error }</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <overlay if={ props.mode === 'pause' || props.mode === 'stop' } icon={ icons[props.mode] }>
                </overlay>
            </div>
        </div>
    </div>
    <script>
        import FloatingActionButton from '../components/floating-action-button/floating-action-button.riot';
        import MediaView from '../components/media-view/media-view.riot';
        import Overlay from  '../components/overlay/overlay.riot';
        import nanoajax from 'nanoajax';

        export default {
            components: {
                FloatingActionButton,
                MediaView,
                Overlay,
            },
            icons: {
                stop: 'stop',
                pause: 'pause',
                play: 'play_arrow',
                refresh: 'refresh',
            },
            currentImageIndex: 0,
            cyclingImages: true,
            imageQueued: false,
            getControlIcon() {
                if (this.props.mode === 'play') {
                    return this.icons.pause;
                }

                if (this.props.mode === 'error') {
                    return this.icons.refresh;
                }

                return this.icons.play;
            },
            onMounted() {
                if (this.props.urls.length > 0) {
                    this.currentImageIndex = 1;
                    this.updateImage(this.props.urls[0]);
                } else {
                    this.props.setError('No images to load.');
                }
            },
            onUpdated() {
                if (this.props.mode === 'play' && !this.cyclingImages) {
                    this.cyclingImages = true;
                    if (!this.imageQueued) {
                        this.queueNext();
                    }
                }
                if (this.props.mode !== 'play') {
                    this.cyclingImages = false;
                }
            },
            errorLoading(e) {
                nanoajax.ajax({ url: this.state.imageUrlSuffixed }, (code, body) => {
                    if (code === 503) {
                        if (this.props.mode !== 'stop') {
                            console.log('Setting stop');
                            this.props.setServerStop();
                        }
                        setTimeout(() => {
                            this.errorLoading(e);
                        }, 1000);
                    } else if (code !== 200) {
                        this.props.setError('Error loading image');
                    } else {
                        this.props.setServerResume();
                    }
                });
            },
            queueNext() {
                this.imageQueued = true;
                setTimeout(() => {
                    this.imageQueued = false;
                    if (this.cyclingImages) {
                        if (this.props.urls.length <= this.currentImageIndex) {
                            this.currentImageIndex = 0;
                        }

                        this.updateImage(this.props.urls[this.currentImageIndex]);

                        this.currentImageIndex += 1;
                    }
                }, this.props.duration);
            },
            /**
             * UpdateImage
             * Update the rendered image
             *
             * @param {string} imageUrl - The image URL to load
             */
            updateImage(imageUrl) {
                const imageUrlSuffixed = `${imageUrl}?d=${Date.now()}`;

                this.update({
                    imageUrl,
                    imageUrlSuffixed,
                });
            },
        };
    </script>
</carousel>
